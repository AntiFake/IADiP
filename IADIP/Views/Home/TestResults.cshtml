@model IADIP.Models.TestResultsViewModel
@{
    ViewBag.Title = "Результаты тестирования";
}
<h2>@ViewBag.Title</h2>

@if (Model.TestResults.Any())
{
    for (int i = 0; i < Model.TestResults.Count; i++)
    {
        <h4>Номер респондента - @(i + 1)</h4>

        <table class="table table-responsive table-hover text-left" >
            @for (int j = 0; j < Model.TestResults[i].Count; j++)
            {
                <tr>
                    <th style="width: 300px">
                        @Model.TestHeaders[j]
                    </th>
                    <td>
                        @Model.TestResults[i][j]
                    </td>
                </tr>
            }
        </table>
    }
}
else
{
    @Html.Partial("EmptyTable")
}

<div id="chart">
</div>

<style>
    .senior {
        fill: red;
    }

    .middle {
        fill: blue;
    }

    .junior {
        fill: green;    
    }
</style>

<script>
    $(function () {
        var json =
        {
            junior: [
                {
                    month: 1,
                    value: 10
                },
                {
                    month: 2,
                    value: 13
                },
                {
                    month: 3,
                    value: 11
                }
            ],
            middle: [
                {
                    month: 1,
                    value: 15
                },
                {
                    month: 2,
                    value: 20
                },
                {
                    month: 3,
                    value: 22
                }
            ],
            senior: [
                {
                    month: 1,
                    value: 25
                },
                {
                    month: 2,
                    value: 27
                },
                {
                    month: 3,
                    value: 25
                }
            ],
        };

        var padding = 50, width = 800, height = 400;

        //Scales
        var xScale = d3.scale.linear()
                             .domain([0, 12])
                             .range([padding, width - padding * 2]);
        var yScale = d3.scale.linear()
                             .domain([0, 50])
                             .range([height - padding, padding]);
        var rScale = d3.scale.linear()
                             .domain([0, 0.05])
                             .range([5, 5]);

        //Defines X axis
        var xAxis = d3.svg.axis()
                          .scale(xScale)
                          .orient("bottom")
                          .ticks(12);
        //Defines Y axis
        var yAxis = d3.svg.axis()
                          .scale(yScale)
                          .orient("left")
                          .ticks(5);

        //Create SVG element
        svg = d3.select("#chart")
            .append("svg")
            .attr("width", width)
            .attr("height", height);

        //Create X axis
        svg.append("g")
            .attr("class", "axis")
            .attr("transform", "translate(0," + (height - padding) + ")")
            .call(xAxis);

        //Create Y axis
        svg.append("g")
            .attr("class", "axis")
            .attr("transform", "translate(" + padding + ",0)")
            .call(yAxis);

        //Creates container for data
        svg.append('g')
            .attr('class', 'data');

        // Displays data

        // Delete all
        svg.select('.data').html('');

        svg.select('.data')
            .append('g')
            .attr('class', 'junior')
            .selectAll('circle')
            .data(json.junior)
            .enter()
                .append('circle')
                .attr('cx', function (d) {
                    return xScale(d.month);
                })
                .attr('cy', function (d) {
                    return yScale(d.value);
                })
                .attr('r', 3);

        svg.select('.data')
           .append('g')
           .attr('class', 'middle')
           .selectAll('circle')
           .data(json.middle)
           .enter()
               .append('circle')
               .attr('cx', function (d) {
                   return xScale(d.month);
               })
               .attr('cy', function (d) {
                   return yScale(d.value);
               })
               .attr('r', 3)
                // path
               .append('path')
                .attr('d', function (d) {
                    d3.svg.line()
                        .x(function (d) { return d.month; })
                        .y(function (d) { return d.value; })
                });


        svg.select('.data')
           .append('g')
           .attr('class', 'senior')
           .selectAll('circle')
           .data(json.senior)
           .enter()
               .append('circle')
               .attr('cx', function (d) {
                   return xScale(d.month);
               })
               .attr('cy', function (d) {
                   return yScale(d.value);
               })
               .attr('r', 3);

        var line = d3.svg.line()
                .x(function (d, i) {
                    return d.month;
                })
                .y(function (d, i) {
                    return d.value;
                });

        svg.selectAll('.data .junior')
            .append('g')
            .data(json.junior).enter()
                .append('path')
                .attr('d', function (d) { return line(d); })
                .attr('fill', 'none')
                .attr('stroke', 'green');

    });
</script>